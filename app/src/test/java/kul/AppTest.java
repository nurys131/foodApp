/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kul;

import kul.view.mainWindow.StartViewModel;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;

class AppTest {
    @Test
    void when_all_fields_are_valid_then_button_should_be_active() {
        StartViewModel viewModel = new StartViewModel();
        viewModel.setEnteredName("Imie");
        viewModel.setEnteredSurname("Nazwisko");
        viewModel.setEnteredTown("Miasto Ulica");
        viewModel.setEnteredHomeNumber("33/3a");
        viewModel.setPizzaSelected(true);
        viewModel.setEnteredPizzas(5);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isFalse();
    }

    @Test
    void when_all_fields_are_valid_without_name_then_button_should_not_be_active() {
        StartViewModel viewModel = new StartViewModel();
//        viewModel.setEnteredName("Imie");
        viewModel.setEnteredSurname("Nazwisko");
        viewModel.setEnteredTown("Miasto Ulica");
        viewModel.setEnteredHomeNumber("33/3a");
        viewModel.setPizzaSelected(true);
        viewModel.setEnteredPizzas(5);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isTrue();
    }

    @Test
    void when_all_fields_are_valid_without_surname_then_button_should_not_be_active() {
        StartViewModel viewModel = new StartViewModel();
        viewModel.setEnteredName("Imie");
//        viewModel.setEnteredSurname("Nazwisko");
        viewModel.setEnteredTown("Miasto Ulica");
        viewModel.setEnteredHomeNumber("33/3a");
        viewModel.setPizzaSelected(true);
        viewModel.setEnteredPizzas(5);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isTrue();
    }

    @Test
    void when_all_fields_are_valid_without_town_address_then_button_should_not_be_active() {
        StartViewModel viewModel = new StartViewModel();
        viewModel.setEnteredName("Imie");
        viewModel.setEnteredSurname("Nazwisko");
//        viewModel.setEnteredTown("Miasto Ulica");
        viewModel.setEnteredHomeNumber("33/3a");
        viewModel.setPizzaSelected(true);
        viewModel.setEnteredPizzas(5);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isTrue();
    }

    @Test
    void when_all_fields_are_valid_without_home_number_then_button_should_not_be_active() {
        StartViewModel viewModel = new StartViewModel();
        viewModel.setEnteredName("Imie");
        viewModel.setEnteredSurname("Nazwisko");
        viewModel.setEnteredTown("Miasto Ulica");
//        viewModel.setEnteredHomeNumber("33/3a");
        viewModel.setPizzaSelected(true);
        viewModel.setEnteredPizzas(5);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isTrue();
    }

    @Test
    void when_all_fields_are_valid_and_name_is_empty_then_button_should_not_be_active() {
        StartViewModel viewModel = new StartViewModel();
        viewModel.setEnteredName("");
        viewModel.setEnteredSurname("Nazwisko");
        viewModel.setEnteredTown("Miasto Ulica");
        viewModel.setEnteredHomeNumber("33/3a");
        viewModel.setPizzaSelected(true);
        viewModel.setEnteredPizzas(5);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isTrue();
    }

    @Test
    void when_order_selected_is_delivery_and_another_fields_are_valid_then_button_should_be_active() {
        StartViewModel viewModel = new StartViewModel();
        viewModel.setEnteredName("Imie");
        viewModel.setEnteredSurname("Nazwisko");
        viewModel.setEnteredTown("Miasto Ulica");
        viewModel.setEnteredHomeNumber("33/3a");
        viewModel.setPizzaSelected(true);
        viewModel.setEnteredPizzas(5);
        viewModel.setOrderSelected(false);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isFalse();
    }

    @Test
    void when_order_selected_is_pickup_and_another_fields_are_valid_then_button_should_be_active() {
        StartViewModel viewModel = new StartViewModel();
        viewModel.setEnteredName("Imie");
        viewModel.setEnteredSurname("Nazwisko");
        viewModel.setPizzaSelected(true);
        viewModel.setEnteredPizzas(5);
        viewModel.setOrderSelected(true);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isFalse();
    }

    @Test
    void when_all_fields_are_valid_and_all_food_selects_are_true_but_all_are_null_then_button_should_not_be_active() {
        StartViewModel viewModel = new StartViewModel();
        viewModel.setEnteredName("Imie");
        viewModel.setEnteredSurname("Nazwisko");
        viewModel.setEnteredTown("Miasto Ulica");
        viewModel.setEnteredHomeNumber("33/3a");

        viewModel.setPizzaSelected(true);
        viewModel.setBurgerSelected(true);
        viewModel.setSaladSelected(true);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isTrue();
    }

    @Test
    void when_all_fields_are_valid_and_all_food_selects_are_true_but_one_is_valid_and_another_are_null_then_button_should_be_active() {
        StartViewModel viewModel = new StartViewModel();
        viewModel.setEnteredName("Imie");
        viewModel.setEnteredSurname("Nazwisko");
        viewModel.setEnteredTown("Miasto Ulica");
        viewModel.setEnteredHomeNumber("33/3a");

        viewModel.setPizzaSelected(true);
        viewModel.setEnteredPizzas(5);
        viewModel.setBurgerSelected(true);
        viewModel.setSaladSelected(true);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isFalse();
    }

    @Test
    void when_all_fields_are_valid_and_all_food_selects_are_true_and_valid_and_we_change_them_to_false_then_button_should_not_be_active() {
        StartViewModel viewModel = new StartViewModel();
        viewModel.setEnteredName("Imie");
        viewModel.setEnteredSurname("Nazwisko");
        viewModel.setEnteredTown("Miasto Ulica");
        viewModel.setEnteredHomeNumber("33/3a");

        viewModel.setPizzaSelected(true);
        viewModel.setEnteredPizzas(5);
        viewModel.setBurgerSelected(true);
        viewModel.setEnteredBurgers(1);
        viewModel.setSaladSelected(true);
        viewModel.setEnteredSalads(80);

        viewModel.setPizzaSelected(false);
        viewModel.setBurgerSelected(false);
        viewModel.setSaladSelected(false);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isTrue();
    }

    @Test
    void when_order_selected_is_pickup_in_person_and_all_another_fields_are_valid_and_we_select_burger_on_true_and_entered_valid_burger_value_and_we_change_burger_selected_on_invalid_then_button_should_not_be_active() {
        StartViewModel viewModel = new StartViewModel();
        viewModel.setEnteredName("Imie");
        viewModel.setEnteredSurname("Nazwisko");
        viewModel.setOrderSelected(true);
        viewModel.setBurgerSelected(true);
        viewModel.setEnteredBurgers(33);

        viewModel.setBurgerSelected(false);

        Assertions.assertThat(viewModel.cannotSubmitProperty.getValue()).isTrue();
    }
}
